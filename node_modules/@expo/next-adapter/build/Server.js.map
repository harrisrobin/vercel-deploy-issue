{"version":3,"file":"Server.js","sourceRoot":"","sources":["../src/Server.ts"],"names":[],"mappings":";;;;;AAAA,qBAAqB;AACrB,+BAA6E;AAE7E,+BAA4B;AAC5B,6BAA4B;AAC5B,gDAAwB;AAExB,SAAgB,aAAa,CAC3B,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,EAA2D,EACrF,GAAoB,EACpB,GAAmB;IAEnB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;QACZ,OAAO;KACR;IACD,MAAM,SAAS,GAAG,WAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACvC,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC;IAE/B,yCAAyC;IACzC,IACE,QAAQ;QACR,CAAC,oBAAoB,EAAE,yBAAyB,EAAE,4BAA4B,CAAC,CAAC,QAAQ,CACtF,QAAQ,CACT,EACD;QACA,MAAM,QAAQ,GAAG,WAAI,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEtD,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;KACrC;SAAM;QACL,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;KAC7B;AACH,CAAC;AAxBD,sCAwBC;AAUM,KAAK,UAAU,iBAAiB,CACrC,WAAmB,EACnB,EACE,GAAG,EAAE,WAAW,EAChB,aAAa,EAAE,qBAAqB,GAIrC;IAED,MAAM,GAAG,GAAG,WAAW,IAAI,cAAI,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC,CAAC;IAChF,MAAM,MAAM,GAAG,GAAG,CAAC,iBAAiB,EAAE,CAAC;IAEvC,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;IAEpB,MAAM,MAAM,GAAG,mBAAY,CAAC,KAAK,EAAE,GAAoB,EAAE,GAAmB,EAAE,EAAE;QAC9E,IAAI,qBAAqB,IAAI,CAAC,MAAM,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE;YACpE,OAAO;SACR;QACD,aAAa,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IACH,OAAO;QACL,MAAM;QACN,GAAG;QACH,MAAM;KACP,CAAC;AACJ,CAAC;AA1BD,8CA0BC;AAEM,KAAK,UAAU,gBAAgB,CACpC,WAAmB,EACnB,EAAE,IAAI,GAAG,IAAI,KAAwB,EAAE;IAEvC,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IACzD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACtC,OAAO,OAAO,CAAC;AACjB,CAAC;AAPD,4CAOC","sourcesContent":["/* eslint-env node */\nimport { IncomingMessage, Server, ServerResponse, createServer } from 'http';\n\nimport { join } from 'path';\nimport { parse } from 'url';\nimport next from 'next';\n\nexport function handleRequest(\n  { projectRoot, app, handle }: { projectRoot: string; app: NextApp; handle: Function },\n  req: IncomingMessage,\n  res: ServerResponse\n) {\n  if (!req.url) {\n    return;\n  }\n  const parsedUrl = parse(req.url, true);\n  const { pathname } = parsedUrl;\n\n  // handle GET requests to service workers\n  if (\n    pathname &&\n    ['/service-worker.js', '/expo-service-worker.js', '/workbox-service-worker.js'].includes(\n      pathname\n    )\n  ) {\n    const filePath = join(projectRoot, '.next', pathname);\n\n    app.serveStatic(req, res, filePath);\n  } else {\n    handle(req, res, parsedUrl);\n  }\n}\n\ntype NextApp = any;\n\ntype ServerOptions = {\n  app: NextApp;\n  handle: Function;\n  server: Server;\n};\n\nexport async function createServerAsync(\n  projectRoot: string,\n  {\n    app: possibleApp,\n    handleRequest: possiblyHandleRequest,\n  }: {\n    app?: NextApp;\n    handleRequest?: (req: IncomingMessage, res: ServerResponse) => Promise<void> | void;\n  }\n): Promise<ServerOptions> {\n  const app = possibleApp || next({ dev: process.env.NODE_ENV !== 'production' });\n  const handle = app.getRequestHandler();\n\n  await app.prepare();\n\n  const server = createServer(async (req: IncomingMessage, res: ServerResponse) => {\n    if (possiblyHandleRequest && (await possiblyHandleRequest(req, res))) {\n      return;\n    }\n    handleRequest({ projectRoot, app, handle }, req, res);\n  });\n  return {\n    server,\n    app,\n    handle,\n  };\n}\n\nexport async function startServerAsync(\n  projectRoot: string,\n  { port = 3000 }: { port?: number } = {}\n): Promise<ServerOptions> {\n  const options = await createServerAsync(projectRoot, {});\n  options.server.listen(port, () => {});\n  return options;\n}\n"]}