"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-env node */
const http_1 = require("http");
const path_1 = require("path");
const url_1 = require("url");
const next_1 = __importDefault(require("next"));
function handleRequest({ projectRoot, app, handle }, req, res) {
    if (!req.url) {
        return;
    }
    const parsedUrl = url_1.parse(req.url, true);
    const { pathname } = parsedUrl;
    // handle GET requests to service workers
    if (pathname &&
        ['/service-worker.js', '/expo-service-worker.js', '/workbox-service-worker.js'].includes(pathname)) {
        const filePath = path_1.join(projectRoot, '.next', pathname);
        app.serveStatic(req, res, filePath);
    }
    else {
        handle(req, res, parsedUrl);
    }
}
exports.handleRequest = handleRequest;
async function createServerAsync(projectRoot, { app: possibleApp, handleRequest: possiblyHandleRequest, }) {
    const app = possibleApp || next_1.default({ dev: process.env.NODE_ENV !== 'production' });
    const handle = app.getRequestHandler();
    await app.prepare();
    const server = http_1.createServer(async (req, res) => {
        if (possiblyHandleRequest && (await possiblyHandleRequest(req, res))) {
            return;
        }
        handleRequest({ projectRoot, app, handle }, req, res);
    });
    return {
        server,
        app,
        handle,
    };
}
exports.createServerAsync = createServerAsync;
async function startServerAsync(projectRoot, { port = 3000 } = {}) {
    const options = await createServerAsync(projectRoot, {});
    options.server.listen(port, () => { });
    return options;
}
exports.startServerAsync = startServerAsync;
//# sourceMappingURL=Server.js.map